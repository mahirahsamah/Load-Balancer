#include <iostream>
#include "classes.h"
#include <queue>
#include <cstdlib>
#include <unistd.h>

using std::cout;
using std::cin;
using std::endl;

/// @brief generate_IP_in() function generates a random string of octets.
///
/// Generates a random IP address that a Request uses as its incoming IP address.
/// @returns Incoming IP address (string).
string generate_IP_in(){
    string one = to_string(rand() % 256);
    string two = to_string(rand() % 256);
    string three = to_string(rand() % 256);
    string four = to_string(rand() % 256);

    return one + '.' + two + '.' + three + '.' + four;
}

/// @brief generate_IP_out() function generates a random string of octets.
///
/// Generates a random IP address that a Request uses as its outgoing IP address.
/// @returns Outgoing IP address (string).
string generate_IP_out(){
    string one = to_string(rand() % 256);
    string two = to_string(rand() % 256);
    string three = to_string(rand() % 256);
    string four = to_string(rand() % 256);

    return one + '.' + two + '.' + three + '.' + four;
}

/// @brief generate_time() function generates a random integer.
///
/// Generates the time that a Request takes to process.
/// @returns Time (integer).
int generate_time(){
    return (5 + ( std::rand() % ( 64 - 5 + 1 ) ));
}

/// @brief Request object constructor.
///
/// A Request object has an incoming IP address that is generated by generate_IP_in(), an outoing IP address that is generated by generate_IP_out(), and a processing time that is generated by generate_time().
request::request(){
    ip_in = generate_IP_in();
    ip_out = generate_IP_out();
    time = generate_time(); 
}

/// @brief Request get_time() function returns the processing time of the request.
///
/// Returns a random integer time that a Request takes to process.
/// @returns Request processing time (integer).
int request::get_time(){
    return time;
}

/// @brief Request get_ip_in() function returns a random string of octets.
///
/// Returns a random IP address that a Request uses as its incoming IP address.
/// @returns Incoming IP address (string).
string request::get_ip_in(){
    return ip_in;
}

/// @brief Request get_ip_out() function returns a random string of octets.
///
/// Returns a random IP address that a Request uses as its outgoing IP address.
/// @returns Outgoing IP address (string).
string request::get_ip_out(){
    return ip_out;
}

/// @brief Webprocessor object constructor.
///
/// A Webprocessor object holds a Request and specifies if it is filled or not. It adopts all the attributes of the Request it current holds, such as ip_in, ip_out, and time.
webprocessor::webprocessor(){
    filled = false;
    ip_in = "";
    ip_out = "";
    time =0 ;
}

/// @brief Webprocessor get_ip_out() function returns whether the is currently holding a Request or not.
///
/// Returns whether the is currently holding a Request or not in the current clock cycle.
/// @returns true if Webprocessor contains a Request.
/// @returns false if Webprocessor does not contain a Request.
bool webprocessor::get_filled(){
    return filled;
}

/// @brief Webprocessor get_time() function returns the processing time of the Request the Webprocessor is holding.
///
/// Returns an integer processing time of a Request that is in the Webprocessor.
/// @returns Request processing time (integer).
int webprocessor::get_time(){
    return time;
}

/// @brief Webprocessor dec_time(int clock_cycle, int idx) function decrements the time of the Request that is currently in the Webprocessor.
///
/// Decrements the time of the Request that is currently in the Webprocessor. This function is called at each clock cycle and when a Request's time reaches 0, the Webprocessor lets go of the Request by setting the filled variable to false.
/// @param clock_cycle The integer current clock cycle the program is on. Used for formatting the console output.
/// @param idx The Webprocessor's index in the Webserver object. Used for formatting the console output.
void webprocessor::dec_time(int clock_cycle, int idx){
    time--;
    if(time == 0){
        filled = false;
        cout << "At " << clock_cycle << ", Processor " << std::to_string(idx) << " completed request from " << ip_in << " to " << ip_out << endl;
    }
}

/// @brief Webprocessor add_request(request r) function accepts and holds a Request in the Webprocessor.
///
/// Accepts a Request and the Webprocessor inherits all the attributes of a Request. Webprocessor's filled variable is also set to true because it accepts a Request.
/// @param r The Request object that the Webprocessor accept and will hold.
void webprocessor::add_request(request r){
    filled = true;
    ip_in = r.get_ip_in();
    ip_out = r.get_ip_out();
    time = r.get_time();
}

/// @brief Request object constructor.
///
/// A Webserver object is a vector of integer size sz that hold Webprocessors. The constructor populates the Webserver object with Webprocessor instances.
/// @param sz The integer size of the Webserver vector.
webserver::webserver(int sz)
{
    for(int i = 0; i < sz; i++){
        webprocessor w;
        arr.push_back(w);
    }
}

/// @brief Webserver access(unsigned int idx) function returns the Webprocessor that was in index idx of the Webserver.
///
/// The access(unsigned int idx) function is used to access the Webprocessor stored in index idx of the Webserver object to manipulate the Webprocessor.
/// @param idx The unsigned integer index that the Webprocessor is stored at in the Webserver.
/// @returns Webprocessor object.
webprocessor* webserver::access(unsigned int idx){
    return &arr[idx];
}

/// @brief Webserver check_next_free_index() function returns the first index where Webprocessor is not filled.
///
/// This function returns the first index where Webprocessor is not filled. This is used to find the next index at which to insert a new Request object from the request queue.
/// @returns Index that is free (integer).
/// @returns -1 if Webserver is full with Requests.
int webserver::check_next_free_index(){
    for(int i =0; i< arr.size(); i++){
        if(!arr[i].get_filled()){
            return i;
        }
    }
    return -1;
}

/// @brief Webserver decrement_all_request_time(int c) decrements the processing time of all Requests that are in the Webprocessors or the Webserver.
///
/// The decrement_all_request_time(int c) function decrements the processing time of all Requests that are in the Webprocessors or the Webserver by 1 at each clock cycle. This is the processing period of the Requests and all the times will eventually become 0, at which the Webprocessor will release that Request.
/// @param c The current integer clock cycle iteration.
void webserver::decrement_all_request_time(int c){
    for(int i = 0; i < arr.size(); i++){
        if(arr[i].get_filled()){
            arr[i].dec_time(c, i);
        }
    }
}

/// @brief Webprocessor get_ip_out() function returns whether the is currently holding a Request or not.
///
/// Returns whether the is currently holding a Request or not in the current clock cycle.
/// @returns true if Webprocessor contains a Request.
/// @returns false if Webprocessor does not contain a Request.
bool webserver::are_all_processors_empty(){
    for(int i = 0; i< arr.size(); i++){
        if(arr[i].get_filled()){
            return false;
        }
    }
    return true;
}

/// @brief Webserver get_size function finds the size of the Webserver vector.
///
/// This function finds the size of the std::vector structure using the size() standard library function, or in other words, it returns how many Webprocessors there are in the Webserver.
/// @returns Size of the Webserver vector (integer).
int webserver::get_size(){
    return arr.size();
}